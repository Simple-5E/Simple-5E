// Mocks generated by Mockito 5.4.5 from annotations
// in simple5e/test/features/create_character/name_selection_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simple5e/data/character_repository.dart' as _i3;
import 'package:simple5e/models/character.dart' as _i5;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [CharacterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterRepository extends _i1.Mock
    implements _i3.CharacterRepository {
  MockCharacterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(
          _FakeDatabase_0(this, Invocation.getter(#database)),
        ),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> createDB(_i2.Database? db, int? version) =>
      (super.noSuchMethod(
        Invocation.method(#createDB, [db, version]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearDB() => (super.noSuchMethod(
        Invocation.method(#clearDB, []),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> createCharacter(_i5.Character? character) =>
      (super.noSuchMethod(
        Invocation.method(#createCharacter, [character]),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> getNextCharacterId() => (super.noSuchMethod(
        Invocation.method(#getNextCharacterId, []),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i5.Character?> readCharacter(int? id) => (super.noSuchMethod(
        Invocation.method(#readCharacter, [id]),
        returnValue: _i4.Future<_i5.Character?>.value(),
      ) as _i4.Future<_i5.Character?>);

  @override
  _i4.Future<List<_i5.Character>> readAllCharacters() => (super.noSuchMethod(
        Invocation.method(#readAllCharacters, []),
        returnValue: _i4.Future<List<_i5.Character>>.value(
          <_i5.Character>[],
        ),
      ) as _i4.Future<List<_i5.Character>>);

  @override
  _i4.Future<int> updateCharacter(_i5.Character? character) =>
      (super.noSuchMethod(
        Invocation.method(#updateCharacter, [character]),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateCharacterStat<T>(
    int? id,
    String? statName,
    T? newValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#updateCharacterStat, [id, statName, newValue]),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteCharacter(int? id) => (super.noSuchMethod(
        Invocation.method(#deleteCharacter, [id]),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
